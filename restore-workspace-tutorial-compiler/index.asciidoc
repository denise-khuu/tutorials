= Restore a workspace
== Learn how to use restoreWorkspace inside your tutorials

====
In this scenario, you will learn how to use the restoreWorkspace() function inside your tutorials.

## Prerequisites
* GitHub Account 
* tutorial-compiler installed 

If you haven't setup the tutorial-compiler yet, you can follow this link to learn it: 
https://katacoda.com/devonfw/scenarios/create-your-own-tutorial.


## Learning goals
In this tutorial you will learn, how to: 
* use 'restoreWorkspace' inside your tutorials
* name the new workspace repository
* clone a forked repository as workspace
* use a local folder as workspace 

You can find the documentation of this function here: 
https://github.com/devonfw-tutorials/tutorials/wiki/Functions

====

[step]
--
addSetupScript("setup/setupTutorialCompiler.sh", "setup/setupTutorialCompiler.sh")
--

====

Usually, the name of the workspace repository is a concatenation of "workspace-" and the name of your playbook-folder.
In this tutorial, we will use this repository here:

https://github.com/devonfw-tutorials/workspace-devon4ng

The name is the concatenation of 'workspace-' and 'devon4ng'.
The runners will look for a tutorial folder, which is named 'devon4ng'. 

[step]
== Naming convention and usage
--
createFile("tutorials/devon4ng/index.asciidoc", "files/devon4ng-as-folder.asciidoc")
nextKatacodaStep("Specify a different repository",  [{"file": "files/workspace-parameter.md"}])
createFile("tutorials/devon4ng-architecture/index.asciidoc", "files/devon4ng-as-parameter.asciidoc")
--

Both ways will clone 'https://github.com/devonfw-tutorials/workspace-devon4ng.git' into our workspace directory. 

Now you know, which name to choose for your repository and how to use 'restoreWorkspace' inside your tutorials.

A quick summary: 
1) naming convention is the concatenation of 'workspace-' and '[name]'
2) 'restoreWorkspace()'' will use the folder name as [name]
3) 'restoreWorkspace({"workspace": "name"})' will use the parameter as [name]
====

====

[step]
== Clone a forked repository as workspace
--
nextKatacodaStep("Fork the workspace- repository", [{"image": "images/fork.jpg"}, {"content": "\nNow you can run your tutorial and add your username and your wanted branch to the command.\n"}])
--
If you run 'localBuildRun.sh --user [YOUR_NAME] --branch [YOUR_BRANCH]' in the terminal, it will clone 

https://github.com/[YOUR_NAME]/workspace-devon4ng.git

into the workspace directory and checkout to the branch [YOUR_BRANCH]

A quick summary: 
1. You need to fork the original workspace-repository
2. With the flag '--user' you can specify the GitHub user
3. With the flad '--branch' you can specify the branch
====

====

It might also come in handy to use a local repository instead of the original or forked repository. 
Choosing a local repository instead of a GitHub repository is a feature only used inside the console runner. 

You should have

https://github.com/devonfw-tutorials/workspace-devon4ng.git

forked and listed in'Your repositories'.
[step]
== How to use a local repository as workspace
--
nextKatacodaStep("Clone the workspace-repository", [ {"content": "\nOpen the forked repository in your GitHub account and copy the repository URL as shown in image below.\n"}, {"image": "images/clone_code.jpg"}, {"file": "files/clone-repository.md"}
])
cloneRepository("", "https://github.com/devonfw-tutorials/workspace-devon4ng.git")
--
====

[step]
== Clone a forked repository as workspace
--
nextKatacodaStep("Fork the workspace- repository", [{"image": "images/fork.jpg"}, {"content": "\nNow you can run your tutorial and add your username and your wanted branch to the command.\n"}])
--

